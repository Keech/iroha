// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: api

#include "api_generated.h"
#include "api.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace iroha {

static const char* Iroha_method_names[] = {
  "/iroha.Iroha/Torii",
};

std::unique_ptr< Iroha::Stub> Iroha::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Iroha::Stub> stub(new Iroha::Stub(channel));
  return stub;
}

Iroha::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_Torii_(Iroha_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status Iroha::Stub::Torii(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, flatbuffers::BufferRef<Response>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Torii_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* Iroha::Stub::AsyncToriiRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>(channel_.get(), cq, rpcmethod_Torii_, context, request);
}

Iroha::Service::Service() {
  (void)Iroha_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Iroha_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Iroha::Service, flatbuffers::BufferRef<ConsensusEvent>, flatbuffers::BufferRef<Response>>(
          std::mem_fn(&Iroha::Service::Torii), this)));
}

Iroha::Service::~Service() {
}

::grpc::Status Iroha::Service::Torii(::grpc::ServerContext* context, const flatbuffers::BufferRef<ConsensusEvent>* request, flatbuffers::BufferRef<Response>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iroha

