// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: api

#include "api_generated.h"
#include "api.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace iroha {

static const char* Repository_method_names[] = {
  "/iroha.Repository/find",
};

std::unique_ptr< Repository::Stub> Repository::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Repository::Stub> stub(new Repository::Stub(channel));
  return stub;
}

Repository::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_find_(Repository_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status Repository::Stub::find(::grpc::ClientContext* context, const flatbuffers::BufferRef<Query>& request, flatbuffers::BufferRef<Response>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_find_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* Repository::Stub::AsyncfindRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Query>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>(channel_.get(), cq, rpcmethod_find_, context, request);
}

Repository::Service::Service() {
  (void)Repository_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Repository_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Repository::Service, flatbuffers::BufferRef<Query>, flatbuffers::BufferRef<Response>>(
          std::mem_fn(&Repository::Service::find), this)));
}

Repository::Service::~Service() {
}

::grpc::Status Repository::Service::find(::grpc::ServerContext* context, const flatbuffers::BufferRef<Query>* request, flatbuffers::BufferRef<Response>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Sumeragi_method_names[] = {
  "/iroha.Sumeragi/Torii",
  "/iroha.Sumeragi/Verify",
};

std::unique_ptr< Sumeragi::Stub> Sumeragi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Sumeragi::Stub> stub(new Sumeragi::Stub(channel));
  return stub;
}

Sumeragi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_Torii_(Sumeragi_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Verify_(Sumeragi_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status Sumeragi::Stub::Torii(::grpc::ClientContext* context, const flatbuffers::BufferRef<Request>& request, flatbuffers::BufferRef<Response>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Torii_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* Sumeragi::Stub::AsyncToriiRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Request>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>(channel_.get(), cq, rpcmethod_Torii_, context, request);
}

::grpc::Status Sumeragi::Stub::Verify(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, flatbuffers::BufferRef<Response>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Verify_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* Sumeragi::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<ConsensusEvent>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>(channel_.get(), cq, rpcmethod_Verify_, context, request);
}

Sumeragi::Service::Service() {
  (void)Sumeragi_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Sumeragi_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sumeragi::Service, flatbuffers::BufferRef<Request>, flatbuffers::BufferRef<Response>>(
          std::mem_fn(&Sumeragi::Service::Torii), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Sumeragi_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Sumeragi::Service, flatbuffers::BufferRef<ConsensusEvent>, flatbuffers::BufferRef<Response>>(
          std::mem_fn(&Sumeragi::Service::Verify), this)));
}

Sumeragi::Service::~Service() {
}

::grpc::Status Sumeragi::Service::Torii(::grpc::ServerContext* context, const flatbuffers::BufferRef<Request>* request, flatbuffers::BufferRef<Response>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sumeragi::Service::Verify(::grpc::ServerContext* context, const flatbuffers::BufferRef<ConsensusEvent>* request, flatbuffers::BufferRef<Response>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iroha

